#!/bin/bash

# HasPHP Server Manager
# Unified script to manage both OpenSwoole and fallback servers

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII Art
echo -e "${CYAN}"
cat << "EOF"
   _   _           ______ _   _ _____  
  | | | |          | ___ \ | | |  _  | 
  | |_| | __ _ ___ | |_/ / |_| | | | | 
  |  _  |/ _` / __||  __/|  _  | | | | 
  | | | | (_| \__ \| |   | | | \ \_/ / 
  \_| |_/\__,_|___/\_|   \_| |_/\___/  
                                      
  High Performance PHP Framework
EOF
echo -e "${NC}"

function show_help() {
    echo -e "${BLUE}HasPHP Server Manager${NC}"
    echo "====================="
    echo ""
    echo "Usage: ./server [command] [options]"
    echo ""
    echo -e "${YELLOW}Commands:${NC}"
    echo "  start          Start the best available server"
    echo "  openswoole     Start OpenSwoole server (high performance)"
    echo "  fallback       Start PHP built-in server (development)"
    echo "  stop           Stop running servers"
    echo "  status         Show server status"
    echo "  install        Install OpenSwoole extension"
    echo "  help           Show this help message"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo "  --port=PORT    Specify port (default: 8080)"
    echo "  --host=HOST    Specify host (default: 127.0.0.1)"
    echo "  --daemon       Run as daemon (OpenSwoole only)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  ./server start                 # Start best server"
    echo "  ./server openswoole --daemon   # Start OpenSwoole as daemon"
    echo "  ./server fallback --port=9000  # Start fallback on port 9000"
    echo "  ./server stop                  # Stop all servers"
    echo ""
}

function check_openswoole() {
    if php -m | grep -q "openswoole"; then
        return 0  # OpenSwoole available
    else
        return 1  # OpenSwoole not available
    fi
}

function check_port() {
    local port=${1:-8080}
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null; then
        return 0  # Port in use
    else
        return 1  # Port available
    fi
}

function kill_port() {
    local port=${1:-8080}
    echo -e "${YELLOW}Port $port is in use. Finding process...${NC}"
    PID=$(lsof -Pi :$port -sTCP:LISTEN -t)
    if [ ! -z "$PID" ]; then
        echo "Process ID: $PID"
        read -p "Kill the existing process? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            kill -9 $PID
            echo -e "${GREEN}✅ Process killed${NC}"
            sleep 1
        else
            echo -e "${RED}❌ Cannot start server while port is in use${NC}"
            exit 1
        fi
    fi
}

function start_openswoole() {
    local port=${1:-8080}
    local host=${2:-"0.0.0.0"}
    local daemon=${3:-false}
    
    if ! check_openswoole; then
        echo -e "${RED}❌ OpenSwoole extension not found${NC}"
        echo ""
        echo -e "${YELLOW}Install OpenSwoole first:${NC}"
        echo "  ./server install"
        echo ""
        echo -e "${BLUE}Or use fallback server:${NC}"
        echo "  ./server fallback"
        return 1
    fi
    
    if check_port $port; then
        kill_port $port
    fi
    
    echo -e "${GREEN}🚀 Starting OpenSwoole server...${NC}"
    echo "   Host: $host"
    echo "   Port: $port"
    echo "   Daemon: $daemon"
    echo ""
    
    # Start OpenSwoole server
    if [ "$daemon" = true ]; then
        nohup php openswoole-server.php > storage/logs/openswoole.log 2>&1 &
        echo -e "${GREEN}✅ OpenSwoole server started as daemon${NC}"
        echo "   Log: storage/logs/openswoole.log"
        echo "   PID: storage/swoole.pid"
    else
        php openswoole-server.php
    fi
}

function start_fallback() {
    local port=${1:-8080}
    local host=${2:-"127.0.0.1"}
    
    if check_port $port; then
        kill_port $port
    fi
    
    echo -e "${BLUE}🔄 Starting PHP built-in server...${NC}"
    echo "   Host: $host"
    echo "   Port: $port"
    echo ""
    echo -e "${YELLOW}💡 For better performance, install OpenSwoole:${NC}"
    echo "   ./server install"
    echo ""
    
    php -S $host:$port server.php
}

function start_best() {
    local port=${1:-8080}
    local host=${2:-"127.0.0.1"}
    local daemon=${3:-false}
    
    if check_openswoole; then
        echo -e "${GREEN}✅ OpenSwoole detected - using high-performance server${NC}"
        start_openswoole $port "0.0.0.0" $daemon
    else
        echo -e "${YELLOW}⚠️  OpenSwoole not found - using fallback server${NC}"
        start_fallback $port $host
    fi
}

function stop_servers() {
    echo -e "${YELLOW}🛑 Stopping HasPHP servers...${NC}"
    
    # Stop OpenSwoole
    if [ -f "storage/swoole.pid" ]; then
        PID=$(cat storage/swoole.pid)
        if kill -0 $PID 2>/dev/null; then
            kill -TERM $PID
            echo -e "${GREEN}✅ Stopped OpenSwoole server (PID: $PID)${NC}"
        fi
        rm -f storage/swoole.pid
    fi
    
    # Stop any PHP built-in servers
    pkill -f "php -S.*server.php"
    
    # Stop any OpenSwoole processes
    pkill -f "openswoole-server.php"
    
    echo -e "${GREEN}✅ All servers stopped${NC}"
}

function show_status() {
    echo -e "${BLUE}📊 HasPHP Server Status${NC}"
    echo "====================="
    echo ""
    
    # Check OpenSwoole extension
    if check_openswoole; then
        echo -e "${GREEN}✅ OpenSwoole extension: Available${NC}"
    else
        echo -e "${YELLOW}⚠️  OpenSwoole extension: Not installed${NC}"
    fi
    
    # Check running processes
    echo ""
    echo -e "${YELLOW}Running processes:${NC}"
    
    if pgrep -f "openswoole-server.php" > /dev/null; then
        echo -e "${GREEN}✅ OpenSwoole server: Running${NC}"
        pgrep -f "openswoole-server.php" | while read pid; do
            echo "   PID: $pid"
        done
    else
        echo -e "${RED}❌ OpenSwoole server: Not running${NC}"
    fi
    
    if pgrep -f "php -S.*server.php" > /dev/null; then
        echo -e "${GREEN}✅ PHP built-in server: Running${NC}"
        pgrep -f "php -S.*server.php" | while read pid; do
            echo "   PID: $pid"
        done
    else
        echo -e "${RED}❌ PHP built-in server: Not running${NC}"
    fi
    
    # Check ports
    echo ""
    echo -e "${YELLOW}Port status:${NC}"
    for port in 8080 9000 3000; do
        if check_port $port; then
            echo -e "${GREEN}✅ Port $port: In use${NC}"
        else
            echo -e "${RED}❌ Port $port: Available${NC}"
        fi
    done
}

function install_openswoole() {
    echo -e "${BLUE}📦 Installing OpenSwoole...${NC}"
    echo ""
    
    # Detect OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo -e "${YELLOW}macOS detected${NC}"
        echo ""
        echo "1. Installing dependencies..."
        brew install pcre2
        
        echo "2. Setting up environment..."
        export PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig
        
        echo "3. Installing OpenSwoole via PECL..."
        pecl install openswoole
        
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo -e "${YELLOW}Linux detected${NC}"
        echo ""
        
        if command -v apt-get > /dev/null; then
            echo "Ubuntu/Debian detected"
            sudo apt-get update
            sudo apt-get install php-dev libpcre2-dev
            sudo pecl install openswoole
            echo "extension=openswoole.so" | sudo tee /etc/php/$(php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;")/mods-available/openswoole.ini
            sudo phpenmod openswoole
        elif command -v yum > /dev/null; then
            echo "CentOS/RHEL detected"
            sudo yum install php-devel pcre2-devel
            sudo pecl install openswoole
            echo "extension=openswoole.so" | sudo tee /etc/php.d/20-openswoole.ini
        fi
    else
        echo -e "${YELLOW}Unknown OS. Please install manually:${NC}"
        echo "See: OPENSWOOLE.md for detailed instructions"
    fi
    
    echo ""
    echo -e "${GREEN}✅ Installation complete! Test with:${NC}"
    echo "   ./server openswoole"
}

# Parse arguments
PORT=8080
HOST="127.0.0.1"
DAEMON=false
COMMAND=""

for arg in "$@"; do
    case $arg in
        --port=*)
            PORT="${arg#*=}"
            shift
            ;;
        --host=*)
            HOST="${arg#*=}"
            shift
            ;;
        --daemon)
            DAEMON=true
            shift
            ;;
        start|openswoole|fallback|stop|status|install|help)
            COMMAND="$arg"
            shift
            ;;
        *)
            # Unknown option
            ;;
    esac
done

# Execute command
case $COMMAND in
    start)
        start_best $PORT $HOST $DAEMON
        ;;
    openswoole)
        start_openswoole $PORT "0.0.0.0" $DAEMON
        ;;
    fallback)
        start_fallback $PORT $HOST
        ;;
    stop)
        stop_servers
        ;;
    status)
        show_status
        ;;
    install)
        install_openswoole
        ;;
    help|"")
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
